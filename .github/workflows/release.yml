name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (semver)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (do not publish)'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            version="${{ github.event.inputs.version }}"
          else
            version="${GITHUB_REF#refs/tags/v}"
          fi
          
          echo "version=$version" >> $GITHUB_OUTPUT
          
          # Check if prerelease
          if [[ $version == *"alpha"* ]] || [[ $version == *"beta"* ]] || [[ $version == *"rc"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate version format
        run: |
          version="${{ steps.version.outputs.version }}"
          if ! [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "❌ Invalid version format: $version"
            exit 1
          fi
          echo "✅ Valid version format: $version"

      - name: Check if version exists
        run: |
          version="${{ steps.version.outputs.version }}"
          if npm view ai-trackdown-tools@$version version 2>/dev/null; then
            echo "❌ Version $version already exists on npm"
            exit 1
          fi
          echo "✅ Version $version is available"

      - name: Validate package.json version
        run: |
          pkg_version=$(node -p "require('./package.json').version")
          release_version="${{ steps.version.outputs.version }}"
          
          if [ "$pkg_version" != "$release_version" ]; then
            echo "❌ package.json version ($pkg_version) doesn't match release version ($release_version)"
            exit 1
          fi
          echo "✅ Package version matches release version"

  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    needs: validate-release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16, 18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run full test suite
        run: |
          npm run typecheck
          npm run lint
          npm test -- --coverage
          npm run build

      - name: Test CLI installation
        run: |
          npm pack
          npm install -g ./ai-trackdown-tools-*.tgz
          aitrackdown --version
          atd --version

  create-release-assets:
    name: Create Release Assets
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Create tarball
        run: npm pack

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog for this release
          echo "## Changes" > RELEASE_CHANGELOG.md
          echo "" >> RELEASE_CHANGELOG.md
          
          # Get commits since last tag
          last_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$last_tag" ]; then
            git log $last_tag..HEAD --pretty=format:"- %s" --no-merges >> RELEASE_CHANGELOG.md
          else
            git log --pretty=format:"- %s" --no-merges >> RELEASE_CHANGELOG.md
          fi
          
          echo "" >> RELEASE_CHANGELOG.md
          echo "## Bundle Size" >> RELEASE_CHANGELOG.md
          
          for file in dist/*.js; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file")
              filename=$(basename "$file")
              echo "- $filename: ${size} bytes" >> RELEASE_CHANGELOG.md
            fi
          done

      - name: Create GitHub Release
        id: create_release
        if: github.event.inputs.dry_run != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          release_name: Release v${{ needs.validate-release.outputs.version }}
          body_path: RELEASE_CHANGELOG.md
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is_prerelease }}

      - name: Upload Release Asset
        if: github.event.inputs.dry_run != 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ai-trackdown-tools-${{ needs.validate-release.outputs.version }}.tgz
          asset_name: ai-trackdown-tools-${{ needs.validate-release.outputs.version }}.tgz
          asset_content_type: application/gzip

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test, create-release-assets]
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Publish to NPM (dry run)
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "🧪 DRY RUN: Would publish to NPM"
          npm publish --dry-run

      - name: Publish to NPM (stable)
        if: github.event.inputs.dry_run != 'true' && needs.validate-release.outputs.is_prerelease == 'false'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to NPM (prerelease)
        if: github.event.inputs.dry_run != 'true' && needs.validate-release.outputs.is_prerelease == 'true'
        run: npm publish --tag beta
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  post-release:
    name: Post Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, publish-npm]
    if: github.event.inputs.dry_run != 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update version badges
        run: |
          version="${{ needs.validate-release.outputs.version }}"
          echo "Released version: $version"
          
          # Update README badges if needed
          # This could be enhanced to automatically update documentation

      - name: Create summary
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Prerelease:** ${{ needs.validate-release.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Published Packages" >> $GITHUB_STEP_SUMMARY
          echo "- [NPM Package](https://www.npmjs.com/package/ai-trackdown-tools)" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-release.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Installation" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "npm install -g ai-trackdown-tools@${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY