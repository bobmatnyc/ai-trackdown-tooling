name: Nightly Builds

on:
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  nightly-test:
    name: Nightly Cross-Platform Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16, 18, 20, 21]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run comprehensive tests
        run: |
          npm run typecheck
          npm run lint
          npm test -- --coverage --reporter=verbose
          npm run build

      - name: Stress test CLI
        run: |
          # Test CLI with various scenarios
          npm pack
          npm install -g ./ai-trackdown-tooling-*.tgz
          
          # Test rapid command execution
          for i in {1..10}; do
            aitrackdown --version > /dev/null
            atd --help > /dev/null
          done

      - name: Memory usage test
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Monitor memory usage during CLI operations
          /usr/bin/time -v aitrackdown --version 2>&1 | grep "Maximum resident set size" || true
          /usr/bin/time -v aitrackdown --help 2>&1 | grep "Maximum resident set size" || true

  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Comprehensive security audit
        run: |
          echo "## 🔒 Nightly Security Audit" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # NPM audit
          echo "### NPM Audit Results" >> $GITHUB_STEP_SUMMARY
          if npm audit --audit-level=low --json > audit.json; then
            echo "✅ No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Vulnerabilities detected:" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat audit.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for outdated dependencies
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Outdated Dependencies" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          npm outdated >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY

  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Run performance benchmarks
        run: |
          echo "## 🚀 Performance Benchmark" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Command | Iterations | Avg Time (ms) | Min (ms) | Max (ms) |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|------------|---------------|----------|----------|" >> $GITHUB_STEP_SUMMARY
          
          commands=("--version" "--help" "status")
          
          for cmd in "${commands[@]}"; do
            times=()
            for i in {1..20}; do
              start=$(date +%s%N)
              timeout 10s ./dist/index.js $cmd > /dev/null 2>&1 || true
              end=$(date +%s%N)
              time_ms=$(( (end - start) / 1000000 ))
              times+=($time_ms)
            done
            
            # Calculate statistics
            min=${times[0]}
            max=${times[0]}
            sum=0
            
            for time in "${times[@]}"; do
              sum=$((sum + time))
              if [ $time -lt $min ]; then min=$time; fi
              if [ $time -gt $max ]; then max=$time; fi
            done
            
            avg=$((sum / 20))
            echo "| \`aitrackdown $cmd\` | 20 | $avg | $min | $max |" >> $GITHUB_STEP_SUMMARY
          done

      - name: Bundle size tracking
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Bundle Size Tracking" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size (bytes) | Size (KB) |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------------|-----------|" >> $GITHUB_STEP_SUMMARY
          
          total_size=0
          for file in dist/*.js; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file")
              size_kb=$((size / 1024))
              filename=$(basename "$file")
              echo "| $filename | $size | $size_kb KB |" >> $GITHUB_STEP_SUMMARY
              total_size=$((total_size + size))
            fi
          done
          
          total_kb=$((total_size / 1024))
          echo "| **Total** | **$total_size** | **$total_kb KB** |" >> $GITHUB_STEP_SUMMARY

  compatibility-matrix:
    name: Compatibility Matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, windows-2019, windows-2022, macos-11, macos-12, macos-13]
        node-version: [16.14.0, 18.17.0, 20.5.0]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install and test
        run: |
          npm ci
          npm test
          npm run build
          
          # Quick CLI test
          npm pack
          npm install -g ./ai-trackdown-tooling-*.tgz
          aitrackdown --version

  report-status:
    name: Nightly Report
    runs-on: ubuntu-latest
    needs: [nightly-test, dependency-audit, performance-benchmark, compatibility-matrix]
    if: always()
    
    steps:
      - name: Generate nightly report
        run: |
          echo "# 🌙 Nightly Build Report - $(date '+%Y-%m-%d')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test results summary
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.nightly-test.result }}" == "success" ]; then
            echo "| Cross-Platform Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Cross-Platform Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.dependency-audit.result }}" == "success" ]; then
            echo "| Security Audit | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Security Audit | ⚠️ Issues Found |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.performance-benchmark.result }}" == "success" ]; then
            echo "| Performance Benchmark | ✅ Completed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Performance Benchmark | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.compatibility-matrix.result }}" == "success" ]; then
            echo "| Compatibility Matrix | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Compatibility Matrix | ⚠️ Some Failures |" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create issue for failures
        if: needs.nightly-test.result == 'failure' || needs.compatibility-matrix.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            const title = `🚨 Nightly Build Failure - ${date}`;
            const body = `
            # Nightly Build Failure Report
            
            **Date:** ${date}
            **Workflow:** ${{ github.run_id }}
            
            ## Failed Jobs
            - Nightly Test: ${{ needs.nightly-test.result }}
            - Compatibility Matrix: ${{ needs.compatibility-matrix.result }}
            
            ## Action Required
            Please investigate the failures and fix any issues found.
            
            **Workflow URL:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'ci/cd', 'nightly-failure']
            });